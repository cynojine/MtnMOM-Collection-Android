/*
 * MtnMOMCollectionLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mtn.momodeveloper.sandbox.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonInclude(Include.ALWAYS)
public class TokenPost200ApplicationJsonResponse 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = 7403869486804670914L;
    private String accessToken;
    private String tokenType;
    private Integer expiresIn;
    /** GETTER
     * A JWT token which can be used to authrize against the other API end-points. The format of the token follows the JWT standard format (see jwt.io for an example). This is the token that should be sent in in the Authorization header when calling the other API end-points.
     */
    @JsonGetter("access_token")
    public String getAccessToken ( ) { 
        return this.accessToken;
    }
    
    /** SETTER
     * A JWT token which can be used to authrize against the other API end-points. The format of the token follows the JWT standard format (see jwt.io for an example). This is the token that should be sent in in the Authorization header when calling the other API end-points.
     */
    @JsonSetter("access_token")
    public void setAccessToken (String value) { 
        this.accessToken = value;
        notifyObservers(this.accessToken);
    }
 
    /** GETTER
     * The token type.
     */
    @JsonGetter("token_type")
    public String getTokenType ( ) { 
        return this.tokenType;
    }
    
    /** SETTER
     * The token type.
     */
    @JsonSetter("token_type")
    public void setTokenType (String value) { 
        this.tokenType = value;
        notifyObservers(this.tokenType);
    }
 
    /** GETTER
     * The validity time in seconds of the token.
     */
    @JsonGetter("expires_in")
    public Integer getExpiresIn ( ) { 
        return this.expiresIn;
    }
    
    /** SETTER
     * The validity time in seconds of the token.
     */
    @JsonSetter("expires_in")
    public void setExpiresIn (Integer value) { 
        this.expiresIn = value;
        notifyObservers(this.expiresIn);
    }
 
}
