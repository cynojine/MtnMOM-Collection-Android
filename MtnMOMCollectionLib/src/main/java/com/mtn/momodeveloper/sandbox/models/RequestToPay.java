/*
 * MtnMOMCollectionLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mtn.momodeveloper.sandbox.models;

import java.util.*;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonInclude(Include.ALWAYS)
public class RequestToPay 
        extends java.util.Observable
        implements java.io.Serializable {
    private static final long serialVersionUID = -8503518807377021983L;
    private String amount;
    private String currency;
    private String externalId;
    private Party payer;
    private String payerMessage;
    private String payeeNote;
    /** GETTER
     * Amount that will be debited from the payer account.
     */
    @JsonGetter("amount")
    public String getAmount ( ) { 
        return this.amount;
    }
    
    /** SETTER
     * Amount that will be debited from the payer account.
     */
    @JsonSetter("amount")
    public void setAmount (String value) { 
        this.amount = value;
        notifyObservers(this.amount);
    }
 
    /** GETTER
     * ISO4217 Currency
     */
    @JsonGetter("currency")
    public String getCurrency ( ) { 
        return this.currency;
    }
    
    /** SETTER
     * ISO4217 Currency
     */
    @JsonSetter("currency")
    public void setCurrency (String value) { 
        this.currency = value;
        notifyObservers(this.currency);
    }
 
    /** GETTER
     * External id is used as a reference to the transaction. External id is used for reconciliation. The external id will be included in transaction history report. <br>External id is not required to be unique.
     */
    @JsonGetter("externalId")
    public String getExternalId ( ) { 
        return this.externalId;
    }
    
    /** SETTER
     * External id is used as a reference to the transaction. External id is used for reconciliation. The external id will be included in transaction history report. <br>External id is not required to be unique.
     */
    @JsonSetter("externalId")
    public void setExternalId (String value) { 
        this.externalId = value;
        notifyObservers(this.externalId);
    }
 
    /** GETTER
     * Party identifies a account holder in the wallet platform. Party consists of two parameters, type and partyId. Each type have its own validation of the partyId<br> MSISDN - Mobile Number validated according to ITU-T E.164. Validated with IsMSISDN<br> EMAIL - Validated to be a valid e-mail format. Validated with IsEmail<br> PARTY_CODE - UUID of the party. Validated with IsUuid
     */
    @JsonGetter("payer")
    public Party getPayer ( ) { 
        return this.payer;
    }
    
    /** SETTER
     * Party identifies a account holder in the wallet platform. Party consists of two parameters, type and partyId. Each type have its own validation of the partyId<br> MSISDN - Mobile Number validated according to ITU-T E.164. Validated with IsMSISDN<br> EMAIL - Validated to be a valid e-mail format. Validated with IsEmail<br> PARTY_CODE - UUID of the party. Validated with IsUuid
     */
    @JsonSetter("payer")
    public void setPayer (Party value) { 
        this.payer = value;
        notifyObservers(this.payer);
    }
 
    /** GETTER
     * Message that will be written in the payer transaction history message field.
     */
    @JsonGetter("payerMessage")
    public String getPayerMessage ( ) { 
        return this.payerMessage;
    }
    
    /** SETTER
     * Message that will be written in the payer transaction history message field.
     */
    @JsonSetter("payerMessage")
    public void setPayerMessage (String value) { 
        this.payerMessage = value;
        notifyObservers(this.payerMessage);
    }
 
    /** GETTER
     * Message that will be written in the payee transaction history note field.
     */
    @JsonGetter("payeeNote")
    public String getPayeeNote ( ) { 
        return this.payeeNote;
    }
    
    /** SETTER
     * Message that will be written in the payee transaction history note field.
     */
    @JsonSetter("payeeNote")
    public void setPayeeNote (String value) { 
        this.payeeNote = value;
        notifyObservers(this.payeeNote);
    }
 
}
