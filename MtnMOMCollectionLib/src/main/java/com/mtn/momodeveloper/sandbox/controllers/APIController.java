/*
 * MtnMOMCollectionLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mtn.momodeveloper.sandbox.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;

import com.mtn.momodeveloper.sandbox.*;
import com.mtn.momodeveloper.sandbox.models.*;
import com.mtn.momodeveloper.sandbox.exceptions.*;
import com.mtn.momodeveloper.sandbox.http.client.HttpClient;
import com.mtn.momodeveloper.sandbox.http.client.HttpContext;
import com.mtn.momodeveloper.sandbox.http.request.HttpRequest;
import com.mtn.momodeveloper.sandbox.http.response.HttpResponse;
import com.mtn.momodeveloper.sandbox.http.response.HttpStringResponse;
import com.mtn.momodeveloper.sandbox.http.client.APICallBack;

public class APIController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static APIController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the APIController class 
     */
    public static APIController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new APIController();
                }
            }
        }
        return instance;
    }

    /**
     * This operation is used to create an access token which can then be used to authorize and authenticate towards the other end-points of the API.
     * @param    authorization    Required parameter: Basic authentication header containing API user ID and API key. Should be sent in as B64 encoded.
     */
    public void createTokenPOSTAsync(
                final String authorization,
                final APICallBack<TokenPost200ApplicationJsonResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateTokenPOSTRequest(authorization);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            TokenPost200ApplicationJsonResponse returnValue = _handleCreateTokenPOSTResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createTokenPOST
     */
    private HttpRequest _buildCreateTokenPOSTRequest(
                final String authorization) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/token/");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Authorization", authorization);
        _headers.put("Ocp-Apim-Subscription-Key", Configuration.ocpApimSubscriptionKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createTokenPOST
     * @return An object of type TokenPost200ApplicationJsonResponse
     */
    private TokenPost200ApplicationJsonResponse _handleCreateTokenPOSTResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 401) {
            throw new TokenPost401ApplicationJsonResponseException("Unauthorized", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("Error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        TokenPost200ApplicationJsonResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<TokenPost200ApplicationJsonResponse>(){});

        return _result;
    }

    /**
     * Get the balance of the account.
     * @param    xTargetEnvironment    Required parameter: The identifier of the EWP system where the transaction shall be processed. This parameter is used to route the request to the EWP system that will initiate the transaction.
     * @param    authorization    Optional parameter: Authorization header used for Basic authentication and oauth. Format of the header parameter follows the standard for Basic and Bearer. Oauth uses Bearer authentication type where the credential is the received access token.
     */
    public void getV10AccountBalanceAsync(
                final String xTargetEnvironment,
                final String authorization,
                final APICallBack<Balance> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetV10AccountBalanceRequest(xTargetEnvironment, authorization);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            Balance returnValue = _handleGetV10AccountBalanceResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getV10AccountBalance
     */
    private HttpRequest _buildGetV10AccountBalanceRequest(
                final String xTargetEnvironment,
                final String authorization) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1_0/account/balance");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("X-Target-Environment", xTargetEnvironment);
        if (authorization != null) {
            _headers.put("Authorization", authorization);
        }
        _headers.put("Ocp-Apim-Subscription-Key", Configuration.ocpApimSubscriptionKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getV10AccountBalance
     * @return An object of type Balance
     */
    private Balance _handleGetV10AccountBalanceResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("Bad request, e.g. invalid data was sent in the request.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorReasonErrorException("Internal error. The returned response contains details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        Balance _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<Balance>(){});

        return _result;
    }

    /**
     * Operation is used  to check if an account holder is registered and active in the system.
     * @param    accountHolderId    Required parameter: The party number. Validated according to the party ID type (case Sensitive). <br> msisdn - Mobile Number validated according to ITU-T E.164. Validated with IsMSISDN<br> email - Validated to be a valid e-mail format. Validated with IsEmail<br> party_code - UUID of the party. Validated with IsUuid
     * @param    accountHolderIdType    Required parameter: Specifies the type of the party ID. Allowed values [msisdn, email, party_code].  <br> accountHolderId should explicitly be in small letters.
     * @param    xTargetEnvironment    Required parameter: The identifier of the EWP system where the transaction shall be processed. This parameter is used to route the request to the EWP system that will initiate the transaction.
     * @param    authorization    Optional parameter: Authorization header used for Basic authentication and oauth. Format of the header parameter follows the standard for Basic and Bearer. Oauth uses Bearer authentication type where the credential is the received access token.
     */
    public void getV10AccountholderAccountholderidtypeAccountholderidActiveAsync(
                final String accountHolderId,
                final String accountHolderIdType,
                final String xTargetEnvironment,
                final String authorization,
                final APICallBack<DynamicResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetV10AccountholderAccountholderidtypeAccountholderidActiveRequest(accountHolderId, accountHolderIdType, xTargetEnvironment, authorization);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            DynamicResponse returnValue = _handleGetV10AccountholderAccountholderidtypeAccountholderidActiveResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getV10AccountholderAccountholderidtypeAccountholderidActive
     */
    private HttpRequest _buildGetV10AccountholderAccountholderidtypeAccountholderidActiveRequest(
                final String accountHolderId,
                final String accountHolderIdType,
                final String xTargetEnvironment,
                final String authorization) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1_0/accountholder/{accountHolderIdType}/{accountHolderId}/active");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("accountHolderId", accountHolderId);
        _templateParameters.put("accountHolderIdType", accountHolderIdType);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("X-Target-Environment", xTargetEnvironment);
        if (authorization != null) {
            _headers.put("Authorization", authorization);
        }
        _headers.put("Ocp-Apim-Subscription-Key", Configuration.ocpApimSubscriptionKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getV10AccountholderAccountholderidtypeAccountholderidActive
     * @return An object of type DynamicResponse
     */
    private DynamicResponse _handleGetV10AccountholderAccountholderidtypeAccountholderidActiveResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("Bad request, e.g. invalid data was sent in the request.", _context);
        }
        if (_responseCode == 500) {
            throw new APIException("Internal error. The returned response contains details.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        DynamicResponse _result = new DynamicResponse(_response);

        return _result;
    }

    /**
     * This operation is used to request a payment from a consumer (Payer). The payer will be asked to authorize the payment. The transaction will be executed once the payer has authorized the payment. The requesttopay will be in status PENDING until the transaction is authorized or declined by the payer or it is timed out by the system. 
     *  Status of the transaction can be validated by using the GET /requesttopay/\<resourceId\>
     * @param    xReferenceId    Required parameter: Format - UUID. Recource ID of the created request to pay transaction. This ID is used, for example, validating the status of the request. ‘Universal Unique ID’ for the transaction generated using UUID version 4.
     * @param    xTargetEnvironment    Required parameter: The identifier of the EWP system where the transaction shall be processed. This parameter is used to route the request to the EWP system that will initiate the transaction.
     * @param    authorization    Optional parameter: Authorization header used for Basic authentication and oauth. Format of the header parameter follows the standard for Basic and Bearer. Oauth uses Bearer authentication type where the credential is the received access token.
     * @param    xCallbackUrl    Optional parameter: URL to the server where the callback should be sent.
     * @param    body    Optional parameter: Example: 
     */
    public void createRequesttopayPOSTAsync(
                final String xReferenceId,
                final String xTargetEnvironment,
                final String authorization,
                final String xCallbackUrl,
                final RequestToPay body,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateRequesttopayPOSTRequest(xReferenceId, xTargetEnvironment, authorization, xCallbackUrl, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleCreateRequesttopayPOSTResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createRequesttopayPOST
     */
    private HttpRequest _buildCreateRequesttopayPOSTRequest(
                final String xReferenceId,
                final String xTargetEnvironment,
                final String authorization,
                final String xCallbackUrl,
                final RequestToPay body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1_0/requesttopay");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("X-Reference-Id", xReferenceId);
        _headers.put("X-Target-Environment", xTargetEnvironment);
        if (authorization != null) {
            _headers.put("Authorization", authorization);
        }
        if (xCallbackUrl != null) {
            _headers.put("X-Callback-Url", xCallbackUrl);
        }
        _headers.put("Ocp-Apim-Subscription-Key", Configuration.ocpApimSubscriptionKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createRequesttopayPOST
     */
    private void _handleCreateRequesttopayPOSTResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("Bad request, e.g. invalid data was sent in the request.", _context);
        }
        if (_responseCode == 409) {
            throw new ErrorReasonErrorException("Conflict, duplicated reference id", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorReasonErrorException("Internal Error.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * This operation is used to get the status of a request to pay. X-Reference-Id that was passed in the post is used as reference to the request.
     * @param    referenceId    Required parameter: UUID of transaction to get result. Reference id  used when creating the request to pay.
     * @param    xTargetEnvironment    Required parameter: The identifier of the EWP system where the transaction shall be processed. This parameter is used to route the request to the EWP system that will initiate the transaction.
     * @param    authorization    Optional parameter: Authorization header used for Basic authentication and oauth. Format of the header parameter follows the standard for Basic and Bearer. Oauth uses Bearer authentication type where the credential is the received access token.
     */
    public void getRequesttopayReferenceIdGETAsync(
                final String referenceId,
                final String xTargetEnvironment,
                final String authorization,
                final APICallBack<RequestToPayResult> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetRequesttopayReferenceIdGETRequest(referenceId, xTargetEnvironment, authorization);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            RequestToPayResult returnValue = _handleGetRequesttopayReferenceIdGETResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getRequesttopayReferenceIdGET
     */
    private HttpRequest _buildGetRequesttopayReferenceIdGETRequest(
                final String referenceId,
                final String xTargetEnvironment,
                final String authorization) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.getBaseUri();

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/v1_0/requesttopay/{referenceId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("referenceId", referenceId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("X-Target-Environment", xTargetEnvironment);
        if (authorization != null) {
            _headers.put("Authorization", authorization);
        }
        _headers.put("Ocp-Apim-Subscription-Key", Configuration.ocpApimSubscriptionKey);
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getRequesttopayReferenceIdGET
     * @return An object of type RequestToPayResult
     */
    private RequestToPayResult _handleGetRequesttopayReferenceIdGETResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new APIException("Bad request, e.g. an incorrectly formatted reference id was provided.", _context);
        }
        if (_responseCode == 404) {
            throw new ErrorReasonErrorException("Resource not found.", _context);
        }
        if (_responseCode == 500) {
            throw new ErrorReasonErrorException("Internal Error. Note that if the retrieved request to pay has failed, it will not cause this status to be returned. This status is only returned if the GET request itself fails.", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        RequestToPayResult _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<RequestToPayResult>(){});

        return _result;
    }

}
